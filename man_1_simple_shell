.TH SIMPLE_SHELL "1" "4/13/2022" "Command line interpreter"
.SH NAME
.B simple_shell
.RS
Input format and Output format.
.RE

.SH SYNOPSIS

.B Simple Shell
 
.B System Calls
.br
.I Fork= Create a child process.
.br

.I Execve=  Executes the program pointed to by filename.
.br

.I Access= Check real users permissions for a file.
.br

.SH DESCRIPTION
.B Simple Shell 
is a school proyect in which shows the basics of the command line interpreter for the system.
.br

.SH OPTIONS
.SS Global Variable
.B $PATH
.br
PATH is an eviromental variable in LInux and other Unix-like OS that tells the shell which directories to search for excutable files in response to commands issued by a user.
.br


.SH EXAMPLE

The following program demonstrates the use of fork(2) and waitpid().  The program creates a child process. 

The following shell session demonstrates the use of the program:

           $ ./a.out &
           Child PID is 32360
           [1] 32359
           $ kill -STOP 32360
           stopped by signal 19
           $ kill -CONT 32360
           continued
           $ kill -TERM 32360
           killed by signal 15
           [1]+  Done                    ./a.out
           $

   Program source

       #include <sys/wait.h>
       #include <stdlib.h>
       #include <unistd.h>
       #include <stdio.h>

       int
       main(int argc, char *argv[])
       {
           pid_t cpid, w;
           int status;

           cpid = fork();
           if (cpid == -1) {
               perror("fork");
               exit(EXIT_FAILURE);
           }

           if (cpid == 0) {            /* Code executed by child */
               printf("Child PID is %ld\n", (long) getpid());
               if (argc == 1)
                   pause();                    /* Wait for signals */
               _exit(atoi(argv[1]));

           } else {                    /* Code executed by parent */
               do {
                   w = waitpid(cpid, &status, WUNTRACED | WCONTINUED);
                   if (w == -1) {
                       perror("waitpid");
                       exit(EXIT_FAILURE);
                   }
 if (WIFEXITED(status)) {
                       printf("exited, status=%d\n", WEXITSTATUS(status));
                   } else if (WIFSIGNALED(status)) {
                       printf("killed by signal %d\n", WTERMSIG(status));
                   } else if (WIFSTOPPED(status)) {
                       printf("stopped by signal %d\n", WSTOPSIG(status));
                   } else if (WIFCONTINUED(status)) {
                       printf("continued\n");
                   }
               } while (!WIFEXITED(status) && !WIFSIGNALED(status));
               exit(EXIT_SUCCESS);
           }
       }
.br

.SH SEE ALSO
man sh(1), man bash(1). 
.br

.SH AUTHOR
.B Holberton Students
.br
Alexander Borrell
 & Yamil Avila 
